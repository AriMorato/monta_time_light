// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../models/grupo.dart';
import '../models/jogador.dart';
import '../models/partida.dart';
import '../models/posicao.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 6635061260520744805),
      name: 'Jogador',
      lastPropertyId: const obx_int.IdUid(5, 6321915253894653608),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6058966117288522769),
            name: 'jogadorId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2821254005385297007),
            name: 'apelido',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4616270333672585207),
            name: 'guiId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4560755560416514643),
            name: 'avatar',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6321915253894653608),
            name: 'pontos',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 5269259397314635988),
            name: 'posicoes',
            targetId: const obx_int.IdUid(3, 4440809913784401753)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 3331839775150026611),
            name: 'partidas',
            targetId: const obx_int.IdUid(2, 3687787850312574576))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 3687787850312574576),
      name: 'Partida',
      lastPropertyId: const obx_int.IdUid(9, 5695697342386997087),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 608893597999478217),
            name: 'partidaId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1189522106316693877),
            name: 'guiId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6923060731559820287),
            name: 'titulo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3216483015010125255),
            name: 'localDaPartida',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2968297253505547841),
            name: 'diaDaSemnaDeJogo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3246362577861428694),
            name: 'horarioInicialDaPartida',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3300723525927021910),
            name: 'horarioFinalDaPartida',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7614328353987496884),
            name: 'independente',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5695697342386997087),
            name: 'grupoId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 5545734479780644400),
            relationTarget: 'Grupo')
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(3, 327057312538482259),
            name: 'jogadores',
            targetId: const obx_int.IdUid(1, 6635061260520744805))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 4440809913784401753),
      name: 'Posicao',
      lastPropertyId: const obx_int.IdUid(4, 4032194742078318578),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5394668930609406323),
            name: 'posicaoId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6444523911800284882),
            name: 'guiId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4643772480545210971),
            name: 'titulo',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(5, 3677145455818237398),
            name: 'jogadores',
            targetId: const obx_int.IdUid(1, 6635061260520744805))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 2647648868665330001),
      name: 'Grupo',
      lastPropertyId: const obx_int.IdUid(2, 9213507257952179587),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7899742609164430781),
            name: 'grupoId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 9213507257952179587),
            name: 'nome',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(6, 4847911244046512895),
            name: 'partidas',
            targetId: const obx_int.IdUid(2, 3687787850312574576))
      ],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(4, 2647648868665330001),
      lastIndexId: const obx_int.IdUid(2, 5545734479780644400),
      lastRelationId: const obx_int.IdUid(6, 4847911244046512895),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [9212600122259486975],
      retiredPropertyUids: const [4032194742078318578],
      retiredRelationUids: const [4175284568821574108],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Jogador: obx_int.EntityDefinition<Jogador>(
        model: _entities[0],
        toOneRelations: (Jogador object) => [],
        toManyRelations: (Jogador object) => {
              obx_int.RelInfo<Jogador>.toMany(1, object.jogadorId):
                  object.posicoes,
              obx_int.RelInfo<Jogador>.toMany(2, object.jogadorId):
                  object.partidas
            },
        getId: (Jogador object) => object.jogadorId,
        setId: (Jogador object, int id) {
          object.jogadorId = id;
        },
        objectToFB: (Jogador object, fb.Builder fbb) {
          final apelidoOffset = fbb.writeString(object.apelido);
          final guiIdOffset = fbb.writeString(object.guiId);
          final avatarOffset =
              object.avatar == null ? null : fbb.writeString(object.avatar!);
          fbb.startTable(6);
          fbb.addInt64(0, object.jogadorId);
          fbb.addOffset(1, apelidoOffset);
          fbb.addOffset(2, guiIdOffset);
          fbb.addOffset(3, avatarOffset);
          fbb.addFloat64(4, object.pontos);
          fbb.finish(fbb.endTable());
          return object.jogadorId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final jogadorIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final apelidoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final guiIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final avatarParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final pontosParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final object = Jogador(
              jogadorId: jogadorIdParam,
              apelido: apelidoParam,
              guiId: guiIdParam,
              avatar: avatarParam,
              pontos: pontosParam);
          obx_int.InternalToManyAccess.setRelInfo<Jogador>(object.posicoes,
              store, obx_int.RelInfo<Jogador>.toMany(1, object.jogadorId));
          obx_int.InternalToManyAccess.setRelInfo<Jogador>(object.partidas,
              store, obx_int.RelInfo<Jogador>.toMany(2, object.jogadorId));
          return object;
        }),
    Partida: obx_int.EntityDefinition<Partida>(
        model: _entities[1],
        toOneRelations: (Partida object) => [object.grupo],
        toManyRelations: (Partida object) => {
              obx_int.RelInfo<Partida>.toMany(3, object.partidaId):
                  object.jogadores
            },
        getId: (Partida object) => object.partidaId,
        setId: (Partida object, int id) {
          object.partidaId = id;
        },
        objectToFB: (Partida object, fb.Builder fbb) {
          final guiIdOffset =
              object.guiId == null ? null : fbb.writeString(object.guiId!);
          final tituloOffset =
              object.titulo == null ? null : fbb.writeString(object.titulo!);
          final localDaPartidaOffset = object.localDaPartida == null
              ? null
              : fbb.writeString(object.localDaPartida!);
          final diaDaSemnaDeJogoOffset = object.diaDaSemnaDeJogo == null
              ? null
              : fbb.writeString(object.diaDaSemnaDeJogo!);
          fbb.startTable(10);
          fbb.addInt64(0, object.partidaId);
          fbb.addOffset(1, guiIdOffset);
          fbb.addOffset(2, tituloOffset);
          fbb.addOffset(3, localDaPartidaOffset);
          fbb.addOffset(4, diaDaSemnaDeJogoOffset);
          fbb.addInt64(5, object.horarioInicialDaPartida);
          fbb.addInt64(6, object.horarioFinalDaPartida);
          fbb.addBool(7, object.independente);
          fbb.addInt64(8, object.grupo.targetId);
          fbb.finish(fbb.endTable());
          return object.partidaId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final partidaIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final guiIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final tituloParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final localDaPartidaParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final diaDaSemnaDeJogoParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final horarioInicialDaPartidaParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final horarioFinalDaPartidaParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final independenteParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final object = Partida(
              partidaId: partidaIdParam,
              guiId: guiIdParam,
              titulo: tituloParam,
              localDaPartida: localDaPartidaParam,
              diaDaSemnaDeJogo: diaDaSemnaDeJogoParam,
              horarioInicialDaPartida: horarioInicialDaPartidaParam,
              horarioFinalDaPartida: horarioFinalDaPartidaParam,
              independente: independenteParam);
          object.grupo.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.grupo.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Partida>(object.jogadores,
              store, obx_int.RelInfo<Partida>.toMany(3, object.partidaId));
          return object;
        }),
    Posicao: obx_int.EntityDefinition<Posicao>(
        model: _entities[2],
        toOneRelations: (Posicao object) => [],
        toManyRelations: (Posicao object) => {
              obx_int.RelInfo<Posicao>.toMany(5, object.posicaoId):
                  object.jogadores
            },
        getId: (Posicao object) => object.posicaoId,
        setId: (Posicao object, int id) {
          object.posicaoId = id;
        },
        objectToFB: (Posicao object, fb.Builder fbb) {
          final guiIdOffset =
              object.guiId == null ? null : fbb.writeString(object.guiId!);
          final tituloOffset = fbb.writeString(object.titulo);
          fbb.startTable(5);
          fbb.addInt64(0, object.posicaoId);
          fbb.addOffset(1, guiIdOffset);
          fbb.addOffset(2, tituloOffset);
          fbb.finish(fbb.endTable());
          return object.posicaoId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final posicaoIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final guiIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final tituloParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = Posicao(
              posicaoId: posicaoIdParam,
              guiId: guiIdParam,
              titulo: tituloParam);
          obx_int.InternalToManyAccess.setRelInfo<Posicao>(object.jogadores,
              store, obx_int.RelInfo<Posicao>.toMany(5, object.posicaoId));
          return object;
        }),
    Grupo: obx_int.EntityDefinition<Grupo>(
        model: _entities[3],
        toOneRelations: (Grupo object) => [],
        toManyRelations: (Grupo object) =>
            {obx_int.RelInfo<Grupo>.toMany(6, object.grupoId): object.partidas},
        getId: (Grupo object) => object.grupoId,
        setId: (Grupo object, int id) {
          object.grupoId = id;
        },
        objectToFB: (Grupo object, fb.Builder fbb) {
          final nomeOffset = fbb.writeString(object.nome);
          fbb.startTable(3);
          fbb.addInt64(0, object.grupoId);
          fbb.addOffset(1, nomeOffset);
          fbb.finish(fbb.endTable());
          return object.grupoId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final grupoIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nomeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Grupo(grupoId: grupoIdParam, nome: nomeParam);
          obx_int.InternalToManyAccess.setRelInfo<Grupo>(object.partidas, store,
              obx_int.RelInfo<Grupo>.toMany(6, object.grupoId));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Jogador] entity fields to define ObjectBox queries.
class Jogador_ {
  /// See [Jogador.jogadorId].
  static final jogadorId =
      obx.QueryIntegerProperty<Jogador>(_entities[0].properties[0]);

  /// See [Jogador.apelido].
  static final apelido =
      obx.QueryStringProperty<Jogador>(_entities[0].properties[1]);

  /// See [Jogador.guiId].
  static final guiId =
      obx.QueryStringProperty<Jogador>(_entities[0].properties[2]);

  /// See [Jogador.avatar].
  static final avatar =
      obx.QueryStringProperty<Jogador>(_entities[0].properties[3]);

  /// See [Jogador.pontos].
  static final pontos =
      obx.QueryDoubleProperty<Jogador>(_entities[0].properties[4]);

  /// see [Jogador.posicoes]
  static final posicoes =
      obx.QueryRelationToMany<Jogador, Posicao>(_entities[0].relations[0]);

  /// see [Jogador.partidas]
  static final partidas =
      obx.QueryRelationToMany<Jogador, Partida>(_entities[0].relations[1]);
}

/// [Partida] entity fields to define ObjectBox queries.
class Partida_ {
  /// See [Partida.partidaId].
  static final partidaId =
      obx.QueryIntegerProperty<Partida>(_entities[1].properties[0]);

  /// See [Partida.guiId].
  static final guiId =
      obx.QueryStringProperty<Partida>(_entities[1].properties[1]);

  /// See [Partida.titulo].
  static final titulo =
      obx.QueryStringProperty<Partida>(_entities[1].properties[2]);

  /// See [Partida.localDaPartida].
  static final localDaPartida =
      obx.QueryStringProperty<Partida>(_entities[1].properties[3]);

  /// See [Partida.diaDaSemnaDeJogo].
  static final diaDaSemnaDeJogo =
      obx.QueryStringProperty<Partida>(_entities[1].properties[4]);

  /// See [Partida.horarioInicialDaPartida].
  static final horarioInicialDaPartida =
      obx.QueryIntegerProperty<Partida>(_entities[1].properties[5]);

  /// See [Partida.horarioFinalDaPartida].
  static final horarioFinalDaPartida =
      obx.QueryIntegerProperty<Partida>(_entities[1].properties[6]);

  /// See [Partida.independente].
  static final independente =
      obx.QueryBooleanProperty<Partida>(_entities[1].properties[7]);

  /// See [Partida.grupo].
  static final grupo =
      obx.QueryRelationToOne<Partida, Grupo>(_entities[1].properties[8]);

  /// see [Partida.jogadores]
  static final jogadores =
      obx.QueryRelationToMany<Partida, Jogador>(_entities[1].relations[0]);
}

/// [Posicao] entity fields to define ObjectBox queries.
class Posicao_ {
  /// See [Posicao.posicaoId].
  static final posicaoId =
      obx.QueryIntegerProperty<Posicao>(_entities[2].properties[0]);

  /// See [Posicao.guiId].
  static final guiId =
      obx.QueryStringProperty<Posicao>(_entities[2].properties[1]);

  /// See [Posicao.titulo].
  static final titulo =
      obx.QueryStringProperty<Posicao>(_entities[2].properties[2]);

  /// see [Posicao.jogadores]
  static final jogadores =
      obx.QueryRelationToMany<Posicao, Jogador>(_entities[2].relations[0]);
}

/// [Grupo] entity fields to define ObjectBox queries.
class Grupo_ {
  /// See [Grupo.grupoId].
  static final grupoId =
      obx.QueryIntegerProperty<Grupo>(_entities[3].properties[0]);

  /// See [Grupo.nome].
  static final nome =
      obx.QueryStringProperty<Grupo>(_entities[3].properties[1]);

  /// see [Grupo.partidas]
  static final partidas =
      obx.QueryRelationToMany<Grupo, Partida>(_entities[3].relations[0]);
}
